Homework 5
Assembly 1
1. Look at the example of init code in today's notes
See gist (https://gist.github.com/extropyCoder/4243c0f90e6a6e97006a31f5b9265b94)
When we do the CODECOPY operation, what are we overwriting ?
-   We are writing 182bytes from calldata into memory after the offset set to byte 27
    in this contract. This is specified in the stack, look at top 3. 
    
(debugging this in Remix might help here)
-   debugged this with team, figured out and answered our questions

. Could the answer to Q1 allow an optimisation ?
-   Theres an ISZERO opcode in regular deployment. If we know what we are doing, this can
    be further optimized. The REVERT command checks if ether was sent. This can be removed
    as well if we know we will not be. 

. Can you trigger a revert in the init code in Remix ?
-   Yes, if you send wei to this contract at deployment and its not payable, this will trigger
    the REVERT opcode.

. Write some Yul to
    1. Add 0x07 to 0x08
    . store the result at the next free memory location.
    . (optional) write this again in opcodes
-   Check Homeworks folder in src

. Can you think of a situation where the opcode EXTCODECOPY is used ?
-   Useful to create another contract based on an already existing contract. Can also check specific
    bytes to ensure contracts meet requirements. Also useful in proxy contracts to verify deployed
    contract matches its source code. 

. Complete the assembly exercises in this repo
Exercises (https://github.com/ExtropyIO/ExpertSolidityBootcamp)
If you want to use gitpod, this is the format
https://gitpod.io/#https://github.com/ExtropyIO/ExpertSolidityBootcamp

-   Finished exercises, This is the copy/paste from 'src/Homeworks/Homework5/ExpertSolidityBootcamp/exercises/defiFoundry/README.md'
-   Homework5.t.sol has been copy/pasted in too from that same repo ^ and commented out

# README

Imagine you have been given the DeFi1 contract by a colleague and asked to test it using Foundry.
Your colleague explains that the contract allows
- investors to claim tokens, but the amount that they can claim should go down each block.
- investors to be added by the administrator
-	These contract system does not allow for the
	functionality desired by the client in this situation. A long list of edits need to be made, some listed below. 

Make sure you know
 - how would you advance blocks, 
-	anvil_mine amount => this will mine a number of blocks
 - how would you make sure every block will work 
 - how would you make sure the contract works with different starting values such as 
 	- block reward, 
	- numbers of investors
	- initial number of tokens

-	Good documentation to reference for Foundry testing is
	the https://book.getfoundry.sh/forge/forge-std site. I reference this site extensively. For the questions asked above, Vm.sol, cast calls, or anvil calls. Fuzz testing will ensure our contracts can handle block rewards, many investor counts, any size initial # of tokens. Combine these with invariant testing to ensure the whole system functions as intended. 

Try to find all the bugs  / security problems / optimisation opportunities  in the contract. 
You do not need to fix the code.
-	There are a lot of bugs/security problems/optimisations
	that I see. Heres some I see:
	- initialAmount = unnecessary storage variable, refer to
		totalSupply
	- addInvestor = public with no restrictions, needs
		onlyOwner
	- payout in claimTokens is not changed. Need to set
		calculatePayout() to payout.
	- blockReward-- could be subtracting from memory or
		storage. I cannot tell which w/o testing. Change name.
	- Tons of security concerns in Token.sol. Use
		Openzeppelin ERC20 contract.
	- Can set initialAmount to immutable 
	- blockReward calculated in calculatePayout(), doesnt 
		need storage variable
	- blockReward calculation leads to optimal payouts being
		produced in blocks ending with 99x. Something looks off. 

