Homework 6
Assembly 2
. Create a Solidity contract with one function
The solidity function should return the amount of ETH that was passed to it, and
the function body should be written in assembly
-   This was performed in Homework6.sol. Took me a lot of researching to learn how
    to write that one line of code properly. Learning! :D

2. Do you know what this code is doing ?
    push9 0x601e8060093d393df3
    msize
    mstore      # mem = 000...000 601e8060093d393df3         
                # = 000...000 spawned constructor
    payload                                             
                # copy the runtime bytecode after the constructor code in mem
    codesize    # cs
    returndatasize # 0 cs
    msize       # 0x20 0 cs
    codecopy    # mem = 000...000 601e8060093d393df3
    RUNTIME_BYTECODE
                # --- stack ---
    push1 9     # 9
    codesize    # cs 9
    add         # cs+9 = CS = total codesize in memory
    push1 23    # 23 CS
    returndatasize # 0 23 CS
    dup3        # CS 0 23 CS
    dup3        # 23 CS 0 23 CS
    callvalue   # v 23 CS 0 23 CS
    create      # addr1 0 23 CS
    pop         # 0 23 CS
    create      # addr2
    selfdestruct

-   PUSH9 is putting 9 bytes into the stack. Next step is storing that value with 0 offset.
    I suspect payload refers to the init code required from constructor to deploy a contract.
    This then checks the size of the current code running in this environment. Based on next 
    opcode, looks like a call is being made to somewhere in this contract and the size of the
    return value is needed. msize is checking how much active memory is being used atm. Next
    step copies current msize amount of data with returndatasize offset and codesize
    destination offset to memory. This copies everything based on how much available memory
    is left. 
    The bottom chunk with stack explanation helps a ton. Pushing a byte and codesize to stack.
    Adding those together. Pushing another byte and returndatasize to stack. Duplicating 3rd
    item on the stack twice, getting another codesize and 2nd push byte. Callvalue puts the
    wei total on the stack. Create eats up top 3 from stack to initalize a new contract. pop
    takes that address off the stack. 2nd create makes another new contract. This 2nd contract
    is then immediately destroyed. 

See gist (https://gist.github.com/extropyCoder/9ddce05801ea7ec0f357ba2d9451b2fb)
The runtime bytecode for this contract is:
0x68601e8060093d393df35952383d59396009380160173d828234f050f0ff

. Explain what the following code is doing in the Yul ERC20 contract
function allowanceStorageOffset(account, spender) -> offset {
    offset := accountToStorageOffset(account)
    mstore(0, offset)
    mstore(0x20, spender)
    offset := keccak256(0, 0x40)
}
-   This assembly function sets the return variable equal to the output of accountToStorageOffset.
    It stores the return value to memory slot 0x0 and spender to 0x20 (both in the scratch space).
    Finally, this function sets the return variable to be the hash of the entire scratch space
    (hash of offset and spender combined). 

I am starting to really understand at this! :) Woot woot!